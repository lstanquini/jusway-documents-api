// r2-storage.js
// M√≥dulo para gerenciar arquivos no Cloudflare R2

require('dotenv').config(); // Carregar as vari√°veis do .env

const { S3Client, PutObjectCommand, GetObjectCommand } = require('@aws-sdk/client-s3');
const crypto = require('crypto');

class R2Storage {
  constructor() {
    this.isConfigured = false;
    this.client = null;
    this.bucketName = process.env.R2_BUCKET_NAME || 'jusway-templates';
    
    // Tentar configurar o R2
    this.initialize();
  }

  initialize() {
    // Verificar se temos as credenciais
    if (!process.env.R2_ACCOUNT_ID || 
        !process.env.R2_ACCESS_KEY_ID || 
        !process.env.R2_SECRET_ACCESS_KEY) {
      console.log('‚ö†Ô∏è  R2 n√£o est√° configurado - verifique o arquivo .env');
      console.log('    Usando armazenamento em mem√≥ria por enquanto');
      return;
    }

    try {
      // Criar o cliente do R2
      this.client = new S3Client({
        region: 'auto',
        endpoint: `https://${process.env.R2_ACCOUNT_ID}.r2.cloudflarestorage.com`,
        credentials: {
          accessKeyId: process.env.R2_ACCESS_KEY_ID,
          secretAccessKey: process.env.R2_SECRET_ACCESS_KEY
        },
        forcePathStyle: true
      });

      this.isConfigured = true;
      console.log('‚úÖ R2 Storage configurado com sucesso!');
      
    } catch (error) {
      console.error('‚ùå Erro ao configurar R2:', error.message);
    }
  }

  // Fun√ß√£o para salvar template no R2
  async saveTemplate(tenantId, templateId, buffer, metadata) {
    if (!this.isConfigured) {
      console.log('üì¶ R2 n√£o configurado - template n√£o ser√° salvo na nuvem');
      return { success: false, reason: 'R2_NOT_CONFIGURED' };
    }

    try {
      // Nome do arquivo no R2
      const fileName = `tenants/${tenantId}/templates/${templateId}.docx`;
      
      console.log(`üì§ Enviando template ${templateId} para o R2...`);
      
      // Enviar arquivo para o R2
      await this.client.send(new PutObjectCommand({
        Bucket: this.bucketName,
        Key: fileName,
        Body: buffer,
        ContentType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        Metadata: {
          tenantId: tenantId,
          templateName: metadata.name || 'template.docx',
          uploadedAt: new Date().toISOString()
        }
      }));

      console.log(`‚úÖ Template ${templateId} salvo no R2 com sucesso!`);
      
      return { 
        success: true, 
        location: 'r2',
        fileName: fileName 
      };

    } catch (error) {
      console.error('‚ùå Erro ao salvar no R2:', error.message);
      return { 
        success: false, 
        error: error.message 
      };
    }
  }

  // Fun√ß√£o para buscar template do R2
  async getTemplate(tenantId, templateId) {
    if (!this.isConfigured) {
      console.log('üì¶ R2 n√£o configurado');
      return null;
    }

    try {
      const fileName = `tenants/${tenantId}/templates/${templateId}.docx`;
      
      console.log(`üì• Buscando template ${templateId} do R2...`);
      
      // Buscar arquivo do R2
      const response = await this.client.send(new GetObjectCommand({
        Bucket: this.bucketName,
        Key: fileName
      }));

      // Converter para Buffer
      const chunks = [];
      for await (const chunk of response.Body) {
        chunks.push(chunk);
      }
      const buffer = Buffer.concat(chunks);
      
      console.log(`‚úÖ Template ${templateId} baixado do R2!`);
      
      return {
        buffer: buffer,
        metadata: response.Metadata
      };

    } catch (error) {
      if (error.Code === 'NoSuchKey') {
        console.log(`‚ö†Ô∏è  Template ${templateId} n√£o encontrado no R2`);
        return null;
      }
      console.error('‚ùå Erro ao buscar do R2:', error.message);
      return null;
    }
  }

  // Testar conex√£o com R2
  async testConnection() {
    if (!this.isConfigured) {
      return { success: false, message: 'R2 n√£o configurado' };
    }

    try {
      console.log('üîç Testando conex√£o com R2...');
      
      // Tentar listar o bucket (s√≥ para testar)
      const command = new PutObjectCommand({
        Bucket: this.bucketName,
        Key: 'test/connection-test.txt',
        Body: 'Teste de conex√£o ' + new Date().toISOString()
      });
      
      await this.client.send(command);
      
      console.log('‚úÖ Conex√£o com R2 funcionando!');
      return { success: true, message: 'Conex√£o OK' };
      
    } catch (error) {
      console.error('‚ùå Erro ao conectar com R2:', error.message);
      return { success: false, message: error.message };
    }
  }
}

// Exportar uma inst√¢ncia √∫nica
module.exports = new R2Storage();